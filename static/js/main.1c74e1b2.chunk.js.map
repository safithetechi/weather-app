{"version":3,"sources":["LoadingScreen/LoadingScreen.js","redux/actions/actionTypes.js","redux/actions/actions.js","Components/TempratureUnitToggle/TempratureUnitToggle.js","Components/WeatherDetailCard/WeatherDetailCard.js","Utils/Utils.js","redux/reducer/reducer.js","Components/WeatherDetailsCarousel/WeatherDetailsCarousel.js","Components/BarChart/BarChart.js","WeatherScreen/WeatherScreen.js","App.js","reportWebVitals.js","redux/store/store.js","index.js"],"names":["LoadingScreen","FETCH_WEATHER_REQUESTED","FETCH_WEATHER_FAILED","FETCH_WEATHER_SUCESS","UNIT","SHOW_BAR_CHART","fetchWeather","dispatch","type","axios","get","then","response","console","log","data","list","map","temp","main","date","dt","payload","catch","error","fetchWeatherFailed","message","connect","bindActionCreators","changeUnit","unit","props","React","useState","setUnit","ToggleButtonGroup","value","exclusive","onChange","e","currentUnit","ToggleButton","showBarChart","id","Paper","elevation","className","onClick","UnitConversion","kal","parseFloat","Kal","toFixed","Kal2Fer","InitState","loading","barChartId","selectTempratureForDay","state","timeStamp","weatherData","weatherObj","weatherDataArray","currentDate","currentDate2","index","length","Date","getUTCDate","push","selectAverageTempForEachDay","key","dataArray","averageTemp","toUTCString","split","slice","join","reduce","a","b","selectWeatherDataForBarChart","reducer","action","itemsToShow","chartData","labels","datasets","label","backgroundColor","borderColor","borderWidth","theme","useTheme","matches","useMediaQuery","breakpoints","up","options","maintainAspectRatio","width","height","useStyles","makeStyles","root","flexGrow","position","chart","bottom","carousel","marginTop","WeatherScreen","classes","useEffect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","Reducer","applyMiddleware","thunk","logger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c74e1b2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n const LoadingScreen = ()=>{\r\n     return (\r\n     \r\n        <div>Loading...</div>\r\n     \r\n     )\r\n    \r\n    }\r\n\r\n export default LoadingScreen;","const FETCH_WEATHER_REQUESTED = 'fetchStarted';\r\nconst FETCH_WEATHER_FAILED = 'fetchFailed';\r\nconst FETCH_WEATHER_SUCESS = 'fetchSucceeded';\r\n\r\nconst CELSIUS = 'C';\r\nconst FAHREN = 'F'\r\n\r\nconst UNIT = 'UNIT'\r\nconst SHOW_BAR_CHART = \"SHOW_BAR_CHART\"\r\n\r\nexport {\r\n    FETCH_WEATHER_REQUESTED,\r\n    FETCH_WEATHER_FAILED,\r\n    FETCH_WEATHER_SUCESS,\r\n    CELSIUS,\r\n    FAHREN,\r\n    UNIT,\r\n    SHOW_BAR_CHART\r\n}","import {\r\n    FETCH_WEATHER_REQUESTED,\r\n    FETCH_WEATHER_FAILED,\r\n    FETCH_WEATHER_SUCESS,\r\n    CELSIUS,\r\n    FAHREN,\r\n    UNIT,\r\n    SHOW_BAR_CHART\r\n} from './actionTypes'\r\n\r\nimport axios from 'axios'\r\n\r\nimport env from \"react-dotenv\";\r\n\r\n\r\nconst changeUnit = unit=>{\r\n    return {\r\n        type:UNIT,\r\n        payload:unit\r\n    }\r\n}\r\n\r\n\r\nconst fetchWeatherRequested = ()=>{\r\n    return {\r\n        type:FETCH_WEATHER_REQUESTED\r\n    }\r\n}\r\n\r\nconst fetchWeatherSuccess = data=>{\r\n    return {\r\n        type:FETCH_WEATHER_SUCESS,\r\n        payload:data\r\n    }\r\n}\r\n\r\nconst fetchWeatherFailed= error=>{\r\n    return {\r\n        type:FETCH_WEATHER_FAILED,\r\n        payload:error\r\n    }\r\n}\r\n\r\nconst showBarChart= id=>{\r\n    return {\r\n        type:SHOW_BAR_CHART,\r\n        payload:id\r\n    }\r\n}\r\n\r\nconst fetchWeather = ()=>{\r\n    return function(dispatch){\r\n        dispatch(fetchWeatherRequested())\r\n        axios.get('https://api.openweathermap.org/data/2.5/forecast?q=Munich,de&APPID=63e0e6d4ca41699c72ee23f160202a63&cnt=40')\r\n        .then(response=>{\r\n            \r\n            console.log(\"Weather Data response\",response.data);\r\n\r\n            const list= response.data.list.map(data=>({temp:data.main.temp, date:data.dt}))\r\n            dispatch(fetchWeatherSuccess(list))\r\n\r\n        })\r\n        .catch(error=>{\r\n            dispatch(fetchWeatherFailed(error.message))\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport {\r\n    changeUnit,\r\n    fetchWeather,\r\n    showBarChart\r\n}","import React from 'react';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport {connect} from 'react-redux';\r\nimport {changeUnit} from '../../redux/actions/actions'\r\nimport { bindActionCreators } from \"redux\"\r\n\r\n\r\nconst TempratureUnitToggle = (props)=>{\r\n    const [unit, setUnit] = React.useState('C')\r\n    \r\n    const handleUnitChange = (e, currentUnit)=>{\r\n        setUnit(currentUnit);\r\n        props.changeUnit(currentUnit)\r\n    }\r\n\r\n   return ( <ToggleButtonGroup\r\n      value={unit}\r\n      exclusive\r\n      onChange={handleUnitChange}\r\n    >\r\n\r\n            <ToggleButton value={\"C\"}>\r\n                C\r\n            </ToggleButton>\r\n\r\n            <ToggleButton value={\"F\"}>\r\n                F\r\n            </ToggleButton>\r\n\r\n    </ToggleButtonGroup>\r\n\r\n\r\n   )\r\n\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch=>{\r\n    return(bindActionCreators( {\r\n        changeUnit:unit=>changeUnit(unit)\r\n        },dispatch))\r\n  }\r\n  \r\n  \r\n\r\nexport default connect(null,mapDispatchToProps)(TempratureUnitToggle);","import React from \"react\";\r\nimport { Paper } from '@material-ui/core'\r\n\r\nimport \"./WeatherDetailCard.css\"\r\n\r\nimport {showBarChart} from '../../redux/actions/actions'\r\nimport {connect} from 'react-redux';\r\nimport { bindActionCreators } from \"redux\"\r\n\r\n\r\nconst WeatherDetailCard = (props)=>{\r\n\r\n\r\n    return (\r\n    \r\n    <Paper elevation={3} className=\"weather-card\" onClick={()=>{props.showBarChart(props.id)}}> \r\n\r\n       <h3>Temp:</h3>{props.temp}\r\n       <h3>Date:</h3>{props.date}\r\n        \r\n\r\n    </Paper>\r\n    \r\n    )\r\n}\r\n\r\n\r\n\r\nconst mapDispatchToProps = dispatch=>{\r\n    return(bindActionCreators( {\r\n        showBarChart:id=>showBarChart(id)\r\n        },dispatch))\r\n  }\r\n  \r\n\r\n\r\nexport default connect(null,mapDispatchToProps)(WeatherDetailCard);","import {CELSIUS, FAHREN} from \"../redux/actions/actionTypes\"\r\n\r\nconst Kal2Cel = (Kal)=>{\r\n    return Kal -273.15\r\n}\r\n\r\nconst Kal2Fer = (Kal)=>{\r\n    return ((Kal -273.15)*1.8) + 32\r\n}\r\n\r\nconst TimeStampToUTCString = (timeStamp)=>{\r\n\r\n    const date = new Date(timeStamp*1000)\r\n    return date.toUTCString().split(' ').slice(0, 4).join(' ');\r\n}\r\n\r\nconst TimeStampToUTCTimeString = (timeStamp)=>{\r\n\r\n    const date = new Date(timeStamp*1000)\r\n    return date.toUTCString().split(' ')[4];\r\n}\r\n\r\n\r\nconst TimeStampToUTCDate = (timeStamp)=>{\r\n\r\n    const date = new Date(timeStamp*1000)\r\n    return date.getUTCDate()\r\n}\r\n\r\n\r\n\r\nconst UnitConversion = (unit, kal)=>{\r\n\r\n        if(unit === CELSIUS) return parseFloat(Kal2Cel(kal)).toFixed(2);\r\n\r\n        if(unit === FAHREN) return parseFloat(Kal2Fer(kal)).toFixed(2);\r\n\r\n}\r\n\r\nexport {UnitConversion,TimeStampToUTCString,TimeStampToUTCDate,TimeStampToUTCTimeString}","import {\r\n    FETCH_WEATHER_REQUESTED,\r\n    FETCH_WEATHER_FAILED,\r\n    FETCH_WEATHER_SUCESS,\r\n    CELSIUS,\r\n    UNIT,\r\n    SHOW_BAR_CHART\r\n} from '../actions/actionTypes'\r\n\r\nimport {TimeStampToUTCDate,TimeStampToUTCString,TimeStampToUTCTimeString,UnitConversion} from '../../Utils/Utils' \r\n\r\n\r\nconst InitState = {\r\n    loading:false,\r\n    error:'',\r\n    list: [],\r\n    unit : CELSIUS,\r\n    barChartId:null    \r\n} \r\n  \r\n  \r\n\r\nconst reducer = (state = InitState,action)=>{\r\n      switch(action.type){\r\n          case FETCH_WEATHER_REQUESTED: return {\r\n            ...state,\r\n            loading:true\r\n          }\r\n          case FETCH_WEATHER_FAILED: return {\r\n            ...state,\r\n            error:action.payload\r\n          }\r\n          case FETCH_WEATHER_SUCESS: return {\r\n            ...state,\r\n            list:action.payload,\r\n            loading:false\r\n          }\r\n          case UNIT:return {\r\n              ...state,\r\n              unit:action.payload\r\n          }\r\n          case SHOW_BAR_CHART: return {\r\n            ...state,\r\n            barChartId:action.payload\r\n          }\r\n          default: return {\r\n              ...state\r\n          }\r\n      }\r\n\r\n}\r\n\r\nconst selectTempratureForDay = state=>{\r\n\r\n  const weatherData = state.list  \r\n\r\n  let weatherObj={}\r\n  let weatherDataArray =[]\r\n  let currentDate=0;\r\n  let currentDate2=0;\r\n\r\n  let index=0;\r\n  for(index=0;index<weatherData.length;index++){\r\n    \r\n    currentDate = TimeStampToUTCDate(weatherData[index].date);\r\n    if(currentDate2 === 0 ){\r\n      currentDate2 = currentDate\r\n    }\r\n    \r\n    if(currentDate === currentDate2){\r\n      weatherDataArray.push(weatherData[index])\r\n      weatherObj[currentDate] = weatherDataArray\r\n    }\r\n    \r\n    else {\r\n\r\n        weatherDataArray = []\r\n        weatherDataArray.push(weatherData[index])\r\n        weatherObj[currentDate] = weatherDataArray\r\n        currentDate2 = currentDate\r\n       }\r\n\r\n  }\r\n\r\n  console.log(weatherObj)\r\n\r\n\r\n  return weatherObj;\r\n\r\n} \r\n\r\n\r\nexport const selectAverageTempForEachDay = state=>{\r\n  const weatherObj = selectTempratureForDay(state)\r\n  let key =0;\r\n  let dataArray = []\r\n  let data = {id:0,date:'',averageTemp:0}\r\n\r\n\r\n  for(key in weatherObj){\r\n\r\n      data.id = key;\r\n      data.date = TimeStampToUTCString(weatherObj[key][0].date)\r\n      data.averageTemp = weatherObj[key].reduce((a, b) => a + b.temp, 0)/weatherObj[key].length\r\n      \r\n      dataArray.push(data)\r\n      data= {}\r\n  }\r\n  \r\n  return dataArray\r\n\r\n}\r\n\r\n\r\nexport const selectWeatherDataForBarChart = state=>{\r\n  const weatherObj = selectTempratureForDay(state)\r\n\r\n  if(state.barChartId === null) return []\r\n\r\n const labels =  weatherObj[state.barChartId].map(data=>\r\n    TimeStampToUTCTimeString(data.date)\r\n  )\r\n\r\n  const values = weatherObj[state.barChartId].map(data=>\r\n    UnitConversion(state.unit,data.temp)\r\n  )\r\n\r\n  return [labels,values]\r\n\r\n}\r\n\r\n\r\nexport default reducer;","import React from \"react\"\r\nimport WeatherDetailCard from \"../WeatherDetailCard/WeatherDetailCard\"\r\nimport Carousel from 'react-elastic-carousel'\r\nimport {connect} from 'react-redux';\r\n\r\nimport {selectAverageTempForEachDay} from '../../redux/reducer/reducer'\r\n\r\nimport {UnitConversion} from '../../Utils/Utils'\r\n\r\n\r\nconst WeatherDetailCarousel = (props)=>{\r\n\r\n    \r\n    return (\r\n        <Carousel className=\"weather-carousel\" itemsToShow={3}>\r\n        {\r\n            props.weatherData.map(data=>{\r\n               return <WeatherDetailCard \r\n                            temp={UnitConversion(props.unit,data.averageTemp)} \r\n                            date= {data.date} \r\n                            key={data.id} \r\n                            id={data.id}\r\n                            onClick={()=>console.log(data.id)}\r\n                         />\r\n            \r\n            })\r\n        }\r\n        </Carousel>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps =state=>{\r\n\r\n    return {\r\n        unit:state.unit,\r\n        weatherData:selectAverageTempForEachDay(state)\r\n    }\r\n  \r\n  }\r\n\r\n\r\nexport default connect(mapStateToProps)(WeatherDetailCarousel);","import * as React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport { Bar as BarChart } from 'react-chartjs-2';\r\n\r\n\r\nimport {connect} from 'react-redux';\r\n\r\nimport {selectWeatherDataForBarChart} from '../../redux/reducer/reducer'\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nimport \"./BarChart.css\"\r\n\r\nconst Chart = ({weatherData})=>{\r\n\r\n\r\n  const [labels,data] = weatherData\r\n\r\n  let chartData = {\r\n    labels: labels,\r\n    datasets: [{\r\n      label: \"Weather Data Chart For Germany Munich\",\r\n      backgroundColor: [\r\n        'rgba(255, 99, 132, 0.2)',\r\n        'rgba(54, 162, 235, 0.2)',\r\n        'rgba(255, 206, 86, 0.2)',\r\n        'rgba(75, 192, 192, 0.2)',\r\n        'rgba(153, 102, 255, 0.2)',\r\n        'rgba(255, 159, 64, 0.2)'\r\n      ],\r\n      borderColor: [\r\n        'rgba(255,99,132,1)',\r\n        'rgba(54, 162, 235, 1)',\r\n        'rgba(255, 206, 86, 1)',\r\n        'rgba(75, 192, 192, 1)',\r\n        'rgba(153, 102, 255, 1)',\r\n        'rgba(255, 159, 64, 1)'\r\n      ],\r\n      borderWidth: 1,\r\n      data: data,\r\n    }]\r\n  };\r\n  let chartOptions = {\r\n \r\n    maintainAspectRatio : true\r\n \r\n  };\r\n\r\n  const theme = useTheme();\r\n  const matches = useMediaQuery(theme.breakpoints.up('xs'));\r\n\r\n\r\n    console.log(matches)\r\n\r\n    return (\r\n      <Paper>\r\n                <BarChart data={chartData} options={chartOptions}  width={100}\r\n  height={25} />\r\n\r\n    </Paper>\r\n\r\n\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps =state=>{\r\n\r\n  return {\r\n      weatherData:selectWeatherDataForBarChart(state),\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(Chart);","import React from \"react\";\r\nimport TempratureUnitToggle from '../Components/TempratureUnitToggle/TempratureUnitToggle'\r\nimport WeatherDetailCarousel from \"../Components/WeatherDetailsCarousel/WeatherDetailsCarousel\"\r\nimport Chart from \"../Components/BarChart/BarChart\"\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      position:\"relative\"\r\n    },\r\n\r\n    chart:{\r\n      position:\"absolute\",\r\n      bottom:0\r\n    },\r\n\r\n    carousel:{\r\n      marginTop:\"3%\"\r\n    }\r\n\r\n  }))\r\n\r\n\r\n\r\nconst WeatherScreen = ()=>{\r\n    const classes = useStyles();\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n\r\n            <TempratureUnitToggle />\r\n\r\n\r\n            <WeatherDetailCarousel className={classes.carousel}/>\r\n\r\n            <Chart className={classes.chart}/>\r\n        \r\n        </div>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nexport default WeatherScreen;","import React,{useEffect} from 'react';\nimport LoadingScreen from './LoadingScreen/LoadingScreen'\nimport WeatherScreen from './WeatherScreen/WeatherScreen'\nimport {connect} from 'react-redux';\nimport {fetchWeather} from './redux/actions/actions'\nimport './App.css';\n\nfunction App({fetchWeather,loading}) {\n\n\n  useEffect(() => {\n      fetchWeather()\n  },[])\n\n\n  return (\n    <div className=\"App\">\n    {loading ? <LoadingScreen/> : <WeatherScreen />}\n    </div>\n  );\n}\n\nconst mapStateToProps =state=>{\n\n  return {\n      loading:state.loading\n  }\n\n}\n\nconst mapDispatchToProps = dispatch=>{\n  return {\n    fetchWeather:()=>dispatch(fetchWeather())\n  }\n}\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createStore, applyMiddleware } from 'redux'\r\nimport Reducer from '../reducer/reducer'\r\nimport thunk from 'redux-thunk'\r\nimport logger from 'redux-logger'\r\nconst store = createStore(Reducer, applyMiddleware(thunk,logger))\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux';\n\nimport store from './redux/store/store'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}